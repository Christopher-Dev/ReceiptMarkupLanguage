<div class="top-bar">

    <MudTooltip Text="Home">
        <MudIconButton Color="Color.Inherit" Icon="@Icons.Material.Filled.Home" Href="/"></MudIconButton>
    </MudTooltip>
    
    <MudTooltip Text="Project Name">
        <MudText Style="margin-left: 0.5rem;" Color="Color.Inherit">Lotto Ticket Receipt</MudText>
    </MudTooltip>

    <MudSpacer></MudSpacer>

    <MudTooltip Text="@validationText" Color="@validationColor" Placement="Placement.Bottom">
        <MudIcon Icon="@validationIcon" Color="@validationColor"></MudIcon>
    </MudTooltip>


    <MudTooltip Text="View Mock Repeater Variables">
        <MudIconButton Style="margin-left: 0.5rem;" Color="Color.Inherit" Icon="@Icons.Material.Filled.Repeat" OnClick="DisplayRepeaterDialog"></MudIconButton>
    </MudTooltip>

    <MudTooltip Text="View Mock Global Variables">
        <MudIconButton Style="margin-left: 0.5rem;" Color="Color.Inherit" Icon="@Icons.Material.Filled.Key" OnClick="DisplayKeyPairDialog"></MudIconButton>
    </MudTooltip>

    <MudTooltip Text="View Full Code">
        <MudIconButton Style="margin-left: 0.5rem;" Color="Color.Inherit" Icon="@Icons.Material.Filled.Code" OnClick="OnClearCodeButtonClicked"></MudIconButton>
    </MudTooltip>
    
    <MudTooltip Text="Encode Image to Base64">
        <MudIconButton Style="margin-left: 0.5rem;" Color="Color.Inherit" Icon="@Icons.Material.Filled.Image"></MudIconButton>
    </MudTooltip>
    
    <MudTooltip Text="Settings">
        <MudIconButton Style="margin-left: 0.5rem;" Color="Color.Inherit" Icon="@Icons.Material.Filled.Settings" OnClick="OnSettingsButtonClicked"></MudIconButton>
    </MudTooltip>
    
    <MudTooltip Text="Clear Editor Content">
        <MudIconButton Style="margin-left: 0.5rem;" Color="Color.Inherit" Icon="@Icons.Material.Filled.Clear" OnClick="OnCancelButtonClicked"></MudIconButton>
    </MudTooltip>

</div>

@code {
    private string validationIcon = Icons.Material.Filled.CheckCircle;
    private Color validationColor = Color.Success;
    private string validationTextSuccess = "Code is Valid" ;
    private string validationTextError = "Code has Errors!";
    private string validationText = "Code is Valid";


    private async Task DisplayRepeaterDialog()
    {
        // Define dialog parameters if needed (for passing data to the dialog)
        var parameters = new DialogParameters();
      
        // Define dialog options
        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
        };

        // Show the dialog with parameters and options
        var dialog = DialogService.Show<RepeaterKeyPairDialog>("", parameters, options);

        // Wait for the dialog result
        var result = await dialog.Result;

        // Check the dialog result
        if (!result.Canceled)
        {
            // Perform actions if the dialog was confirmed
            // Reload data or perform deletion logic here
        }
    }

    private async Task DisplayKeyPairDialog()
    {
        // Define dialog parameters if needed (for passing data to the dialog)
        var parameters = new DialogParameters();

        // Define dialog options
        var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Large,
                FullWidth = true,
            };

        // Show the dialog with parameters and options
        var dialog = DialogService.Show<KeyPairDialog>("", parameters, options);

        // Wait for the dialog result
        var result = await dialog.Result;

        // Check the dialog result
        if (!result.Canceled)
        {
            // Perform actions if the dialog was confirmed
            // Reload data or perform deletion logic here
        }
    }


    protected override async Task OnInitializedAsync()
    {
        // Subscribe to the ValidationResult event
        ReceiptViewModel.ValidationResult += OnValidationResultChanged;
        
        await base.OnInitializedAsync();
    }

    private async void OnValidationResultChanged(object? sender, bool isValid)
    {
        await UpdateValidationIconAsync(isValid);
    }

    public async Task UpdateValidationIconAsync(bool isValid)
    {
        validationIcon = isValid ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Cancel;
        validationColor = isValid ? Color.Success : Color.Error;
        validationText = isValid ? validationTextSuccess : validationTextError;
        await InvokeAsync(StateHasChanged);
    }

    private void OnHomeButtonClicked()
    {
        // Trigger the HomeButtonPressed event or perform logic here
    }

    private void OnClearCodeButtonClicked()
    {
        // Trigger the ClearCodeButtonPressed event or perform logic here
    }

    private void OnSettingsButtonClicked()
    {
        // Trigger the SettingsButtonPressed event or perform logic here
    }

    private void OnCancelButtonClicked()
    {
        // Trigger the CancelButtonPressed event or perform logic here
    }

    public void Dispose()
    {
        // Unsubscribe from the ValidationResult event to prevent memory leaks
        ReceiptViewModel.ValidationResult -= OnValidationResultChanged;
    }
}